# coding: utf-8

"""
    Safemat Api

    The Safemat REST API permits applications to connect securely to the Safemat software to carry out a multitude of operations.  Authentication and token-based access control is enforced.  ### Token: <table><thead><tr><th>Name</th><th>Token type</th><th>Lifetime</th></tr></thead><tbody><tr><td>Access token</td><td><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://jwt.io/\">JWT</a>., Bearer token</td><td>60m</td></tr></tbody></table>  ### Access token usage  API requests (where authorisation is required) must include the bearer access token in the header.  Once the access token expires it should be refreshed.   ### How to determine if the token has expired <ol> <li>The API returns a 401 error.</li> <li>Check the <code>exp</code> field in the token payloads.</li> </ol>  ### Token structure  <table><thead><tr><th>Key name</th><th>Description</th></tr></thead><tbody><tr><td>exp</td><td>Expiration date and time in UNIX format</td></tr><tr><td>uid</td><td>Token owner(Unique number of devices(terminal))</td></tr><tr><td>terminal_id</td><td>Id in base of devices(terminal`s)</td></tr><tr><td>iat</td><td>Created date and time in UNIX format</td></tr></tbody></table>    # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingsDataBillDispenserConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com_port': 'str',
        'min_level': 'int',
        'cassette1': 'CassetteData',
        'cassette2': 'CassetteData',
        'cassette3': 'CassetteData',
        'cassette4': 'CassetteData',
        'cassette5': 'CassetteData',
        'cassette6': 'CassetteData',
        'cassette7': 'CassetteData',
        'cassette8': 'CassetteData'
    }

    attribute_map = {
        'com_port': 'ComPort',
        'min_level': 'MinLevel',
        'cassette1': 'Cassette1',
        'cassette2': 'Cassette2',
        'cassette3': 'Cassette3',
        'cassette4': 'Cassette4',
        'cassette5': 'Cassette5',
        'cassette6': 'Cassette6',
        'cassette7': 'Cassette7',
        'cassette8': 'Cassette8'
    }

    def __init__(self, com_port=None, min_level=None, cassette1=None, cassette2=None, cassette3=None, cassette4=None, cassette5=None, cassette6=None, cassette7=None, cassette8=None):  # noqa: E501
        """SettingsDataBillDispenserConfig - a model defined in Swagger"""  # noqa: E501
        self._com_port = None
        self._min_level = None
        self._cassette1 = None
        self._cassette2 = None
        self._cassette3 = None
        self._cassette4 = None
        self._cassette5 = None
        self._cassette6 = None
        self._cassette7 = None
        self._cassette8 = None
        self.discriminator = None
        if com_port is not None:
            self.com_port = com_port
        if min_level is not None:
            self.min_level = min_level
        if cassette1 is not None:
            self.cassette1 = cassette1
        if cassette2 is not None:
            self.cassette2 = cassette2
        if cassette3 is not None:
            self.cassette3 = cassette3
        if cassette4 is not None:
            self.cassette4 = cassette4
        if cassette5 is not None:
            self.cassette5 = cassette5
        if cassette6 is not None:
            self.cassette6 = cassette6
        if cassette7 is not None:
            self.cassette7 = cassette7
        if cassette8 is not None:
            self.cassette8 = cassette8

    @property
    def com_port(self):
        """Gets the com_port of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The com_port of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: str
        """
        return self._com_port

    @com_port.setter
    def com_port(self, com_port):
        """Sets the com_port of this SettingsDataBillDispenserConfig.


        :param com_port: The com_port of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: str
        """

        self._com_port = com_port

    @property
    def min_level(self):
        """Gets the min_level of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The min_level of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: int
        """
        return self._min_level

    @min_level.setter
    def min_level(self, min_level):
        """Sets the min_level of this SettingsDataBillDispenserConfig.


        :param min_level: The min_level of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: int
        """

        self._min_level = min_level

    @property
    def cassette1(self):
        """Gets the cassette1 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette1 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette1

    @cassette1.setter
    def cassette1(self, cassette1):
        """Sets the cassette1 of this SettingsDataBillDispenserConfig.


        :param cassette1: The cassette1 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette1 = cassette1

    @property
    def cassette2(self):
        """Gets the cassette2 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette2 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette2

    @cassette2.setter
    def cassette2(self, cassette2):
        """Sets the cassette2 of this SettingsDataBillDispenserConfig.


        :param cassette2: The cassette2 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette2 = cassette2

    @property
    def cassette3(self):
        """Gets the cassette3 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette3 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette3

    @cassette3.setter
    def cassette3(self, cassette3):
        """Sets the cassette3 of this SettingsDataBillDispenserConfig.


        :param cassette3: The cassette3 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette3 = cassette3

    @property
    def cassette4(self):
        """Gets the cassette4 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette4 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette4

    @cassette4.setter
    def cassette4(self, cassette4):
        """Sets the cassette4 of this SettingsDataBillDispenserConfig.


        :param cassette4: The cassette4 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette4 = cassette4

    @property
    def cassette5(self):
        """Gets the cassette5 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette5 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette5

    @cassette5.setter
    def cassette5(self, cassette5):
        """Sets the cassette5 of this SettingsDataBillDispenserConfig.


        :param cassette5: The cassette5 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette5 = cassette5

    @property
    def cassette6(self):
        """Gets the cassette6 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette6 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette6

    @cassette6.setter
    def cassette6(self, cassette6):
        """Sets the cassette6 of this SettingsDataBillDispenserConfig.


        :param cassette6: The cassette6 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette6 = cassette6

    @property
    def cassette7(self):
        """Gets the cassette7 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette7 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette7

    @cassette7.setter
    def cassette7(self, cassette7):
        """Sets the cassette7 of this SettingsDataBillDispenserConfig.


        :param cassette7: The cassette7 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette7 = cassette7

    @property
    def cassette8(self):
        """Gets the cassette8 of this SettingsDataBillDispenserConfig.  # noqa: E501


        :return: The cassette8 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :rtype: CassetteData
        """
        return self._cassette8

    @cassette8.setter
    def cassette8(self, cassette8):
        """Sets the cassette8 of this SettingsDataBillDispenserConfig.


        :param cassette8: The cassette8 of this SettingsDataBillDispenserConfig.  # noqa: E501
        :type: CassetteData
        """

        self._cassette8 = cassette8

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsDataBillDispenserConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsDataBillDispenserConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
