# coding: utf-8

"""
    Safemat Api

    The Safemat REST API permits applications to connect securely to the Safemat software to carry out a multitude of operations.  Authentication and token-based access control is enforced.  ### Token: <table><thead><tr><th>Name</th><th>Token type</th><th>Lifetime</th></tr></thead><tbody><tr><td>Access token</td><td><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://jwt.io/\">JWT</a>., Bearer token</td><td>60m</td></tr></tbody></table>  ### Access token usage  API requests (where authorisation is required) must include the bearer access token in the header.  Once the access token expires it should be refreshed.   ### How to determine if the token has expired <ol> <li>The API returns a 401 error.</li> <li>Check the <code>exp</code> field in the token payloads.</li> </ol>  ### Token structure  <table><thead><tr><th>Key name</th><th>Description</th></tr></thead><tbody><tr><td>exp</td><td>Expiration date and time in UNIX format</td></tr><tr><td>uid</td><td>Token owner(Unique number of devices(terminal))</td></tr><tr><td>terminal_id</td><td>Id in base of devices(terminal`s)</td></tr><tr><td>iat</td><td>Created date and time in UNIX format</td></tr></tbody></table>    # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bill_acceptor_config': 'SettingsDataBillAcceptorConfig',
        'bill_dispenser_config': 'SettingsDataBillDispenserConfig',
        'printer_config': 'SettingsDataPrinterConfig',
        'gui_config': 'object',
        'api_config': 'SettingsDataAPIConfig'
    }

    attribute_map = {
        'bill_acceptor_config': 'BillAcceptorConfig',
        'bill_dispenser_config': 'BillDispenserConfig',
        'printer_config': 'PrinterConfig',
        'gui_config': 'GUIConfig',
        'api_config': 'APIConfig'
    }

    def __init__(self, bill_acceptor_config=None, bill_dispenser_config=None, printer_config=None, gui_config=None, api_config=None):  # noqa: E501
        """SettingsData - a model defined in Swagger"""  # noqa: E501
        self._bill_acceptor_config = None
        self._bill_dispenser_config = None
        self._printer_config = None
        self._gui_config = None
        self._api_config = None
        self.discriminator = None
        if bill_acceptor_config is not None:
            self.bill_acceptor_config = bill_acceptor_config
        if bill_dispenser_config is not None:
            self.bill_dispenser_config = bill_dispenser_config
        if printer_config is not None:
            self.printer_config = printer_config
        if gui_config is not None:
            self.gui_config = gui_config
        if api_config is not None:
            self.api_config = api_config

    @property
    def bill_acceptor_config(self):
        """Gets the bill_acceptor_config of this SettingsData.  # noqa: E501


        :return: The bill_acceptor_config of this SettingsData.  # noqa: E501
        :rtype: SettingsDataBillAcceptorConfig
        """
        return self._bill_acceptor_config

    @bill_acceptor_config.setter
    def bill_acceptor_config(self, bill_acceptor_config):
        """Sets the bill_acceptor_config of this SettingsData.


        :param bill_acceptor_config: The bill_acceptor_config of this SettingsData.  # noqa: E501
        :type: SettingsDataBillAcceptorConfig
        """

        self._bill_acceptor_config = bill_acceptor_config

    @property
    def bill_dispenser_config(self):
        """Gets the bill_dispenser_config of this SettingsData.  # noqa: E501


        :return: The bill_dispenser_config of this SettingsData.  # noqa: E501
        :rtype: SettingsDataBillDispenserConfig
        """
        return self._bill_dispenser_config

    @bill_dispenser_config.setter
    def bill_dispenser_config(self, bill_dispenser_config):
        """Sets the bill_dispenser_config of this SettingsData.


        :param bill_dispenser_config: The bill_dispenser_config of this SettingsData.  # noqa: E501
        :type: SettingsDataBillDispenserConfig
        """

        self._bill_dispenser_config = bill_dispenser_config

    @property
    def printer_config(self):
        """Gets the printer_config of this SettingsData.  # noqa: E501


        :return: The printer_config of this SettingsData.  # noqa: E501
        :rtype: SettingsDataPrinterConfig
        """
        return self._printer_config

    @printer_config.setter
    def printer_config(self, printer_config):
        """Sets the printer_config of this SettingsData.


        :param printer_config: The printer_config of this SettingsData.  # noqa: E501
        :type: SettingsDataPrinterConfig
        """

        self._printer_config = printer_config

    @property
    def gui_config(self):
        """Gets the gui_config of this SettingsData.  # noqa: E501


        :return: The gui_config of this SettingsData.  # noqa: E501
        :rtype: object
        """
        return self._gui_config

    @gui_config.setter
    def gui_config(self, gui_config):
        """Sets the gui_config of this SettingsData.


        :param gui_config: The gui_config of this SettingsData.  # noqa: E501
        :type: object
        """

        self._gui_config = gui_config

    @property
    def api_config(self):
        """Gets the api_config of this SettingsData.  # noqa: E501


        :return: The api_config of this SettingsData.  # noqa: E501
        :rtype: SettingsDataAPIConfig
        """
        return self._api_config

    @api_config.setter
    def api_config(self, api_config):
        """Sets the api_config of this SettingsData.


        :param api_config: The api_config of this SettingsData.  # noqa: E501
        :type: SettingsDataAPIConfig
        """

        self._api_config = api_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
